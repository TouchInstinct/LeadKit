import Foundation

///Предварительный расчёт стоимости товаров
///
///В интерфейсе модели товара должна присуствовать текущая цена исходя из которой можно рассчитать итоговую стоимость всей корзины
protocol ProductPriceHolder {
    ///Цена в определённой валюте
    var price: CartProductPrice { get }
}

///Применение промокодов
///
///В интерфейсе локальной корзины должна присуствовать возможность применения или удаления промокода. Промокодов в корзине может быть несколько. У промокода должно присутсвовать опциональное поле discount, для расчёта скидки в сумме чека.
protocol PromocodesHolder {
    var promocodes: [Promocode] { get set }
}

protocol Promocode {
    var discount: CartProductPrice? { get }
}

///Расчёт бонусов
///
///В интерфейсе товара должно присуствовать опциональное поле бонусов, которое будет суммироваться для отображения в чеке.
protocol BonusesHolder {
    ///Количество бонусов, которые будут начислены при покупке
    var bonuses: Int? { get }
}

///В интерфейсе серверной корзины должно присуствовать опциональное поле с количеством доступных бонусов для использования.
protocol AvailableBonusesHolder {
    ///Количество доступных бонусов для использования
    var availableBonuses: Int? { get }
}

///Товары не доступные для заказа
///
///По аналогии с удалёнными товарами из корзины, товары не доступные для заказа не должны попадать на стадию оформления заказа и не должны расчиываться в общей сумме корзины
protocol NotAvailableProductsHolder {
    var notAvailableProducts: [CartProduct] { get set }
}
